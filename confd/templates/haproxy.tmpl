global
    daemon                  off
    pidfile                 /var/run/haproxy.pid
    user                    haproxy
    group                   haproxy
    maxconn                 100000
    log                     {{ or (getenv "SYSLOG_TARGET") "127.0.0.1 local1 info" }}
    tune.ssl.default-dh-param 2048
    {{$ciphers := getenv "KONTENA_LB_SSL_CIPHERS"}}
    {{if (len $ciphers) ne 0}}
    ssl-default-bind-ciphers {{$ciphers}}
    {{else}}
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA
    {{end}}

defaults
    log                     global
    mode                    http
    option                  splice-auto
    option                  http-keep-alive
    option                  redispatch
    option                  httplog
    retries                 3
    timeout http-request    5s
    timeout queue           1m
    timeout connect         5s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    {{$settings := getenv "KONTENA_LB_CUSTOM_SETTINGS"}}
    {{if (len $settings) ne 0}}
      {{range $setting := split $settings "\n" }}
        {{$setting}}
      {{end}}
    {{end}}

listen http-in
    bind *:80
    http-request replace-header Host (.*):.* \1
    {{if exists "/certs/bundle"}}
    bind *:443 ssl crt /etc/haproxy/certs/ no-sslv3
    reqadd X-Forwarded-Proto:\ https if { ssl_fc }
    reqadd X-Forwarded-Port:\ 443 if { ssl_fc }
    {{end}}

    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http

    {{$health_endpoint := getenv "KONTENA_LB_HEALTH_URI"}}
    {{if (len $health_endpoint) ne 0}}
    monitor-uri {{$health_endpoint}}
    errorfile 200 /etc/haproxy/errors/200.http
    {{end}}

    {{range $service := ls "/services"}}
    {{$upstreams := printf "/services/%s/upstreams/*" $service }}
    {{$upstream_servers := gets $upstreams }} {{$upstream_len := len $upstreams}}
    {{if ne $upstream_len 0}}
      {{$virtual_hosts := printf "/services/%s/virtual_hosts" $service}}
      {{if exists $virtual_hosts}}
        {{range $host := split (getv $virtual_hosts) "," }}
          {{ $host_parts := split $host "." }}
          {{if eq (index $host_parts 0) "*"}}
          acl host_{{$service}} hdr_end(host) -i {{replace $host "*." "." -1}}
          {{else}}
          acl host_{{$service}} hdr(host) -i {{$host}}
          {{end}}
        {{end}}
      {{end}}
      {{$virtual_path := printf "/services/%s/virtual_path" $service}}
      {{if exists $virtual_path}}
        {{range $path := split (getv $virtual_path) "," }}
          acl host_{{$service}}_virtual_path url_beg {{$path}}
        {{end}}
      {{end}}
    {{end}}
    {{end}}

    {{range $service := ls "/services"}}
    {{$upstreams := printf "/services/%s/upstreams/*" $service }}
    {{$upstream_servers := gets $upstreams }} {{$upstream_len := len $upstreams}}
    {{if ne $upstream_len 0}}
      {{$virtual_hosts := printf "/services/%s/virtual_hosts" $service}}
      {{$virtual_path := printf "/services/%s/virtual_path" $service}}
      {{if (exists $virtual_hosts) | and (exists $virtual_path)}}
      use_backend {{$service}} if host_{{$service}} host_{{$service}}_virtual_path
      {{end}}
    {{end}}
    {{end}}

    {{range $service := ls "/services"}}
    {{$upstreams := printf "/services/%s/upstreams/*" $service }}
    {{$upstream_servers := gets $upstreams }} {{$upstream_len := len $upstreams}}
    {{if ne $upstream_len 0}}
      {{$virtual_hosts := printf "/services/%s/virtual_hosts" $service}}
      {{$virtual_path := printf "/services/%s/virtual_path" $service}}
      {{if (exists $virtual_hosts) | and (not (exists $virtual_path))}}
        use_backend {{$service}} if host_{{$service}}
      {{end}}
    {{end}}
    {{end}}

    {{range $service := ls "/services"}}
    {{$upstreams := printf "/services/%s/upstreams/*" $service }}
    {{$upstream_servers := gets $upstreams }} {{$upstream_len := len $upstreams}}
    {{if ne $upstream_len 0}}
      {{$virtual_hosts := printf "/services/%s/virtual_hosts" $service}}
      {{$virtual_path := printf "/services/%s/virtual_path" $service}}
      {{if exists $virtual_path | and (not (exists $virtual_hosts))}}
        use_backend {{$service}} if host_{{$service}}_virtual_path
      {{end}}
    {{end}}
    {{end}}

{{range $service := ls "/services"}}
{{$upstreams := printf "/services/%s/upstreams/*" $service }}
{{$upstream_servers := gets $upstreams }} {{$upstream_len := len $upstreams}}
{{if ne $upstream_len 0}}
backend {{$service}}
    option                  forwardfor
    {{$custom_settings := printf "/services/%s/custom_settings" $service}}
    {{if exists $custom_settings}}
      {{range $setting := split (getv $custom_settings) "\n" }}
        {{$setting}}
      {{end}}
    {{end}}

    {{$cookie := printf "/services/%s/cookie" $service}}
    {{if exists $cookie}}
      {{if eq (getv $cookie) ""}}
        cookie KONTENA_SERVERID insert indirect nocache
      {{else}}
        {{getv $cookie}}
      {{end}}
    {{end}}

    {{$balance := printf "/services/%s/balance" $service}}
    {{if exists $balance}}
    balance                 {{getv $balance}}
    {{else}}
    balance                 roundrobin
    {{end}}

    {{$basic_auth := printf "/services/%s/basic_auth_secrets" $service}}
    {{if exists $basic_auth}}
    acl auth_ok_{{$service}} http_auth(auth_users_{{$service}})
    http-request auth realm {{$service}} unless auth_ok_{{$service}}
    {{end}}

    {{$virtual_path := printf "/services/%s/virtual_path" $service}}
    {{$keep_virtual_path := printf "/services/%s/keep_virtual_path" $service}}
    {{if exists $keep_virtual_path}}
    {{if exists $virtual_path}}
    {{if not (eq (getv $keep_virtual_path) "true")}}
    {{range $path := split (getv $virtual_path) "," }}
    reqrep ^([^\ :]*)\ {{$path}}[/]?(.*)     \1\ /\2
    {{end}}
    {{end}}
    {{end}}
    {{else if exists $virtual_path}}
    {{range $path := split (getv $virtual_path) "," }}
    reqrep ^([^\ :]*)\ {{$path}}[/]?(.*)     \1\ /\2
    {{end}}
    {{end}}

    {{$http_check_uri := (printf "/services/%s/health_check_uri" $service)}}
    {{if exists $http_check_uri}}
    option httpchk GET {{getv $http_check_uri}}
    {{end}}

    {{range $upstream := ls (printf "/services/%s/upstreams" $service)}}
    server {{$upstream}} {{printf "/services/%s/upstreams/%s" $service $upstream | getv}} check {{if exists $cookie}}cookie {{$upstream}}{{end}}
    {{end}}
{{end}}
{{end}}

{{range $service := ls "/tcp-services"}}
{{$upstreams := printf "/services/%s/upstreams/*" $service }}
{{$upstream_servers := gets $upstreams }} {{$upstream_len := len $upstreams}}
{{if ne $upstream_len 0}}
listen {{$service}}
    mode tcp
    {{$balance := printf "/tcp-services/%s/balance" $service}}
    {{if exists $balance}}
    balance                 {{getv $balance}}
    {{else}}
    balance                 leastconn
    {{end}}

    {{$custom_settings := printf "/tcp-services/%s/custom_settings" $service}}
    {{if exists $custom_settings}}
      {{range $setting := split (getv $custom_settings) "\n" }}
        {{$setting}}
      {{end}}
    {{end}}

    bind *:{{printf "/tcp-services/%s/external_port" $service | getv}}
    {{range $upstream := ls (printf "/tcp-services/%s/upstreams" $service)}}
    server {{$upstream}} {{printf "/tcp-services/%s/upstreams/%s" $service $upstream | getv}} check
    {{end}}
{{end}}
{{end}}

listen stats
    mode http
    bind 0.0.0.0:1000
    stats enable
    stats uri /
    stats refresh 10s
    stats show-node
    stats show-legends

    # if authentication is wanted
    acl auth_ok http_auth(stats-auth)
    http-request auth unless auth_ok

userlist stats-auth
    user stats insecure-password {{getenv "STATS_PASSWORD"}}


{{range $service := ls "/services"}}
{{$basic_auth_key := printf "/services/%s/basic_auth_secrets" $service }}
{{if exists $basic_auth_key}}
{{$auth_data := getv $basic_auth_key }} {{$auth_data_len := len $auth_data}}
userlist auth_users_{{$service}}
  {{$auth_data}}
{{end}}
{{end}}
